#!/usr/bin/env bash

source async;
source utils;

# Configuration
ico=$(pwd)/images/test.png;          # Icon of the image used for notifications
success=$(pwd)/images/success.png;   # Tests success icon
fail=$(pwd)/images/fail.png;         # Tests failed icon
dirs="./src/ ./tests/";              # Folders to watch

recompile_tests_title="Now compiling tests...";
recompile_tests_msg="Please wait few seconds or minute according your project size (from ${dirs}).";

tests_success_title="TEST PASSED !!";
tests_success_desc="Congratulation, sir!";

tests_failed_title="TEST FAILED !!";
tests_failed_desc="Please fix your code before pushing it, sir!";

# Function called at each folder source code update
function buildAndTest() {
    # We run tests
    removePreviousNotifications;
    echo "Compiling and running tests."
    if [[ "$OSTYPE" == "darwin"* ]]; then
        terminal-notifier -title "${recompile_tests_title}" -message "${recompile_tests_msg}"  -appIcon "${ico}"
    else
        notify-send -i "${ico}" "${recompile_tests_title}" "${recompile_tests_msg}";
    fi;
    ./make;
    ./cmake-build-debug/tests;
    removePreviousNotifications;
    if [[ $? == "0" ]]; then
        if [[ "$OSTYPE" == "darwin"* ]]; then
            terminal-notifier -title "${tests_success_title}" -message "${tests_success_desc}"  -appIcon "${success}"
        elif [[ "$OSTYPE" == "linux-gnu" ]]; then
            notify-send -i "${success}" "${tests_success_title}" "${tests_success_desc}";
        fi;
    else
        if [[ "$OSTYPE" == "darwin"* ]]; then
            terminal-notifier -title "${tests_failed_title}" -message "${tests_failed_desc}"  -appIcon "${fail}"
        elif [[ "$OSTYPE" == "linux-gnu" ]]; then
            notify-send -i "${fail}" "${tests_failed_title}" "${tests_failed_desc}";
        fi;
    fi;
};

# Start watcher
watch "${dirs}" buildAndTest;